// schema.prisma

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                   Int       @id @default(autoincrement())
  companyName          String    @map("company_name") @db.VarChar(255)
  officeAddress        String    @map("office_address")
  isHeadOffice         Boolean   @default(true) @map("is_head_office")
  phoneNumber          String    @map("phone_number") @db.VarChar(50)
  region               String?   @map("region")
  area                 String?   @map("area")
  adminUserId          String    @unique @map("admin_user_id")
  createdAt            DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  workosOrganizationId String?   @unique @map("workos_organization_id")
  users                User[]

  @@index([adminUserId], map: "idx_admin_user_id")
  @@map("companies")
}

model User {
  id                        Int       @id @default(autoincrement())
  workosUserId              String?    @unique @map("workos_user_id")
  companyId                 Int       @map("company_id")
  email                     String    @map("email")
  firstName                 String?   @map("first_name")
  lastName                  String?   @map("last_name")
  role                      String    @map("role") // Jr Exec, Exec, Sr Exec, Asst Manager, Manager, Sr Manager, etc....
  createdAt                 DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  phoneNumber               String?   @map("phone_number") @db.VarChar(50)
  company                   Company   @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inviteToken               String?   @unique
  status                    String    @default("active") // "pending", "active", "inactive"
  region                    String?   @map("region")
  area                      String?   @map("area")

  // Fields for salesman app specific login (empID and emp_password)
  salesmanLoginId           String?   @unique @map("salesman_login_id")
  hashedPassword            String?   @map("hashed_password") // Stores securely hashed passwords

  // --- HIERARCHY FIELDS ---
  reportsToId               Int?      @map("reports_to_id")
  reportsTo                 User?     @relation("ReportsToManager", fields: [reportsToId], references: [id], onDelete: SetNull)
  reports                   User[]    @relation("ReportsToManager")

  // Relationships to new tables
  dealers                   Dealer[] 
  dailyVisitReports         DailyVisitReport[]
  technicalVisitReports     TechnicalVisitReport[]
  salesmanAttendance        SalesmanAttendance[]
  salesmanLeaveApplications SalesmanLeaveApplication[]
  competitionReports        CompetitionReport[]
  geoTrackingRecords        GeoTracking[] @relation("UserGeoTracking") // Relationship for GeoTracking records
  assignedTasks             DailyTask[]  @relation("AssignedTasks") // Tasks assigned to this user (salesman)
  createdTasks              DailyTask[]  @relation("CreatedTasks") // Tasks created by this user (admin)
  ratings                   Rating[]
  salesOrders               SalesOrder[]
  // PJPs assigned to this user
  permanentJourneyPlansAssigned PermanentJourneyPlan[] @relation("PJP_AssignedUser")
  // PJPs created by this user
  permanentJourneyPlansCreated  PermanentJourneyPlan[] @relation("PJP_CreatedBy")

  // --- NEW RELATIONS FOR TSO & INVENTORY ---
  createdMeetings                     TSOMeeting[]             @relation("UserCreatedMeetings") 
  giftLogs                            GiftAllocationLog[]   @relation("UserGiftLogs")
  giftTransfersSent                   GiftAllocationLog[]   @relation("SourceUserTransfers")
  giftTransfersReceived               GiftAllocationLog[]   @relation("DestinationUserTransfers")
  
  @@unique([companyId, email])
  @@index([companyId], map: "idx_user_company_id")
  @@index([workosUserId], map: "idx_workos_user_id")
  @@map("users")
}

// Dealers (Consolidated for Dealers and Sub-Dealers)
model Dealer {
  id                  String   @id @default(uuid()) @db.VarChar(255)
  userId              Int?      @map("user_id") // Primary user (salesman) associated
  type                String   @db.VarChar(50)
  parentDealerId      String?  @map("parent_dealer_id") @db.VarChar(255) // Self-referencing FK for sub-dealers
  name                String   @db.VarChar(255) // Stores dealerName or subDealerName
  region              String   @db.VarChar(100)
  area                String   @db.VarChar(255)
  phoneNo             String   @map("phone_no") @db.VarChar(20)
  address             String   @db.VarChar(500)
  pinCode             String?   @db.VarChar(20)
  latitude            Decimal?   @db.Decimal(10, 7)
  longitude           Decimal?   @db.Decimal(10, 7)
  dateOfBirth         DateTime? @db.Date
  anniversaryDate     DateTime? @db.Date
  totalPotential      Decimal  @map("total_potential") @db.Decimal(10, 2)
  bestPotential       Decimal  @map("best_potential") @db.Decimal(10, 2)
  brandSelling        String[] @map("brand_selling") // Array of strings
  feedbacks           String   @db.VarChar(500)
  remarks             String?  @db.VarChar(500)
  dealerDevelopmentStatus    String? @map("dealerdevelopmentstatus") @db.VarChar(255)
  dealerDevelopmentObstacle  String? @map("dealerdevelopmentobstacle") @db.VarChar(255)

  // --- Verification Status ---
  verificationStatus             String    @map("verification_status") @db.VarChar(50) @default("PENDING") // New Status Field

  whatsappNo                     String?   @map("whatsapp_no") @db.VarChar(20)
  emailId                        String?   @map("email_id") @db.VarChar(255)
  businessType                   String?   @map("business_type") @db.VarChar(100)
  gstinNo                        String?   @map("gstin_no") @db.VarChar(20) // GSTIN no. (string)
  panNo                          String?   @map("pan_no") @db.VarChar(20) // PAN no. (string)
  tradeLicNo                     String?   @map("trade_lic_no") @db.VarChar(150) // Trade Lic (string)
  aadharNo                       String?   @map("aadhar_no") @db.VarChar(20) // Aadhar No (string)

  // --- Godown Details ---
  godownSizeSqFt                 Int?      @map("godown_size_sqft") // Godown Size in sq ft
  godownCapacityMTBags           String?   @map("godown_capacity_mt_bags") // Capacity in (MT/Bags)
  godownAddressLine              String?   @map("godown_address_line") @db.VarChar(500) // Godown Address
  godownLandMark                 String?   @map("godown_landmark") @db.VarChar(255) // LandMark
  godownDistrict                 String?   @map("godown_district") @db.VarChar(100) // District
  godownArea                     String?   @map("godown_area") @db.VarChar(255) // Area
  godownRegion                   String?   @map("godown_region") @db.VarChar(100) // Region
  godownPinCode                  String?   @map("godown_pincode") @db.VarChar(20) // PinCode

  // --- Residential Address Details (Distinct from Godown/Primary) ---
  residentialAddressLine         String?   @map("residential_address_line") @db.VarChar(500) // Residential Address of Dealer
  residentialLandMark            String?   @map("residential_landmark") @db.VarChar(255) // landMark
  residentialDistrict            String?   @map("residential_district") @db.VarChar(100) // District
  residentialArea                String?   @map("residential_area") @db.VarChar(255) // Area
  residentialRegion              String?   @map("residential_region") @db.VarChar(100) // Region
  residentialPinCode             String?   @map("residential_pincode") @db.VarChar(20) // PinCode

  // --- Bank Details (Individual fields as requested) ---
  bankAccountName                String?   @map("bank_account_name") @db.VarChar(255) // Account Name
  bankName                       String?   @map("bank_name") @db.VarChar(255) // Name of Bank
  bankBranchAddress              String?   @map("bank_branch_address") @db.VarChar(500) // Branch Address
  bankAccountNumber              String?   @map("bank_account_number") @db.VarChar(50) // Account Number
  bankIfscCode                   String?   @map("bank_ifsc_code") @db.VarChar(50) // IFSC code

  // --- Sales & Promoter Details ---
  brandName                      String?   @map("brand_name") @db.VarChar(255) // Brands sold by the dealer
  monthlySaleMT                  Decimal?  @map("monthly_sale_mt") @db.Decimal(10, 2) // Monthly Sale(MT)
  noOfDealers                    Int?      @map("no_of_dealers") // No of Dealers
  areaCovered                    String?   @map("area_covered") @db.VarChar(255) // Area Covered
  projectedMonthlySalesBestCementMT Decimal? @map("projected_monthly_sales_best_cement_mt") @db.Decimal(10, 2) // projected Monthly sales of best Cement (MT per month)
  noOfEmployeesInSales           Int?      @map("no_of_employees_in_sales") // No.of employees in sales

  // --- Declaration ---
  declarationName                String?   @map("declaration_name") @db.VarChar(255) // Name
  declarationPlace               String?   @map("declaration_place") @db.VarChar(100) // Place
  declarationDate                DateTime? @map("declaration_date") @db.Date // Date

  // --- Document/Image URLs ---
  tradeLicencePicUrl             String?   @map("trade_licence_pic_url") @db.VarChar(500)
  shopPicUrl                     String?   @map("shop_pic_url") @db.VarChar(500)
  dealerPicUrl                   String?   @map("dealer_pic_url") @db.VarChar(500)
  blankChequePicUrl              String?   @map("blank_cheque_pic_url") @db.VarChar(500)
  partnershipDeedPicUrl          String?   @map("partnership_deed_pic_url") @db.VarChar(500) // Optional

  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  //foreign key relations
  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentDealer    Dealer?  @relation("SubDealers", fields: [parentDealerId], references: [id], onDelete: SetNull)
  subDealers      Dealer[] @relation("SubDealers")
  dailyTasks      DailyTask[] @relation("DealerDailyTasks")
  salesOrders     SalesOrder[]

  reportsAndScores DealerReportsAndScores? @relation("DealerScores")

  dealerBrandCapacities  DealerBrandMapping[]

  @@index([userId], map: "idx_dealers_user_id")
  @@index([parentDealerId], map: "idx_dealers_parent_dealer_id")
  @@map("dealers")
}

// Daily Visit Reports
model DailyVisitReport {
  id                    String    @id @default(uuid()) @db.VarChar(255)
  userId                Int       @map("user_id") // Foreign Key to User.id
  reportDate            DateTime  @map("report_date") @db.Date
  dealerType            String    @map("dealer_type") @db.VarChar(50) // "Dealer", "Sub Dealer"
  dealerName            String?   @map("dealer_name") @db.VarChar(255)
  subDealerName         String?   @map("sub_dealer_name") @db.VarChar(255)
  location              String    @db.VarChar(500)
  latitude              Decimal   @db.Decimal(10, 7)
  longitude             Decimal   @db.Decimal(10, 7)
  visitType             String    @map("visit_type") @db.VarChar(50) // "Best", "Non Best"
  dealerTotalPotential  Decimal   @map("dealer_total_potential") @db.Decimal(10, 2)
  dealerBestPotential   Decimal   @map("dealer_best_potential") @db.Decimal(10, 2)
  brandSelling          String[]  @map("brand_selling") // Array of strings
  contactPerson         String?   @map("contact_person") @db.VarChar(255)
  contactPersonPhoneNo  String?   @map("contact_person_phone_no") @db.VarChar(20)
  todayOrderMt          Decimal   @map("today_order_mt") @db.Decimal(10, 2)
  todayCollectionRupees Decimal   @map("today_collection_rupees") @db.Decimal(10, 2)
  overdueAmount         Decimal?  @map("overdue_amount") @db.Decimal(12, 2)
  feedbacks             String    @db.VarChar(500)
  solutionBySalesperson String?   @map("solution_by_salesperson") @db.VarChar(500)
  anyRemarks            String?   @map("any_remarks") @db.VarChar(500)
  checkInTime           DateTime  @map("check_in_time") @db.Timestamptz(6)
  checkOutTime          DateTime? @map("check_out_time") @db.Timestamptz(6)
  inTimeImageUrl        String?   @map("in_time_image_url") @db.VarChar(500)
  outTimeImageUrl       String?   @map("out_time_image_url") @db.VarChar(500)
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)
  salesOrders           SalesOrder[] @relation("OrderDVR") //relation back to sales_orders

  @@index([userId], map: "idx_daily_visit_reports_user_id")
  @@map("daily_visit_reports")
}

// Technical Visit Reports
model TechnicalVisitReport {
  id                      String    @id @default(uuid()) @db.VarChar(255)
  userId                  Int       @map("user_id") // Foreign Key to User.id
  reportDate              DateTime  @map("report_date") @db.Date
  visitType               String    @map("visit_type") @db.VarChar(50) // "Installation", "Repair", "Maintenance"
  siteNameConcernedPerson String    @map("site_name_concerned_person") @db.VarChar(255)
  phoneNo                 String    @map("phone_no") @db.VarChar(20)
  emailId                 String?   @map("email_id") @db.VarChar(255)
  clientsRemarks          String    @map("clients_remarks") @db.VarChar(500)
  salespersonRemarks      String    @map("salesperson_remarks") @db.VarChar(500)
  checkInTime             DateTime  @map("check_in_time") @db.Timestamptz(6)
  checkOutTime            DateTime? @map("check_out_time") @db.Timestamptz(6)
  inTimeImageUrl          String?   @map("in_time_image_url") @db.VarChar(500)
  outTimeImageUrl         String?   @map("out_time_image_url") @db.VarChar(500)
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  siteVisitBrandInUse     String[] @map("site_visit_brand_in_use") // e.g., "Star/Dalmia/Ultratech" [cite: 99]
  siteVisitStage          String? @map("site_visit_stage")      // e.g., "Foundation/column/slab casting" [cite: 100]
  conversionFromBrand     String?  @map("conversion_from_brand")      // e.g., "Dalmia/Star" [cite: 102]
  conversionQuantityValue Decimal? @map("conversion_quantity_value") @db.Decimal(10, 2)
  conversionQuantityUnit  String?  @map("conversion_quantity_unit")  @db.VarChar(20) // "Bag" or "MT" [cite: 103]
  associatedPartyName     String?  @map("associated_party_name")     // Dealer, Sub dealer name [cite: 104]
  influencerType          String[] @map("influencer_type") // e.g., "Contractor", "Engineer" etc. [cite: 106, 107, 108, 109, 110, 111]
  serviceType             String? @map("service_type") // e.g., "Dhalai Attend" [cite: 113]
  qualityComplaint        String? @map("quality_complaint") // e.g., "Slow Setting", "Cracks" etc. [cite: 116, 117, 118, 119]
  promotionalActivity     String? @map("promotional_activity") // e.g., "Mason Meet" [cite: 122]
  channelPartnerVisit     String? @map("channel_partner_visit") // e.g., "Dealer Visit" [cite: 129]

  siteVisitType           String?   @map("site_visit_type") @db.VarChar(50) // e.g., "Dealer", "Project",...
  dhalaiVerificationCode  String?   @map("dhalai_verification_code") @db.VarChar(50)   
  isVerificationStatus    String?   @map("is_verification_status") @db.VarChar(50) // e.g., "Verified", "Pending", "Rejected"
  meetingId               String?   @map("meeting_id") @db.VarChar(255)
  meeting                 TSOMeeting?  @relation("TVRMeeting", fields: [meetingId], references: [id])

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_technical_visit_reports_user_id")
  @@index([meetingId], map: "idx_technical_visit_reports_meeting_id")
  @@map("technical_visit_reports")
}

// Meeting: Stores records of Head Mason Meets, Engineer Meets, etc.
model TSOMeeting {
  id                    String    @id @default(uuid()) @db.VarChar(255)
  type                  String    @db.VarChar(100) // e.g., "Head Mason Meet", "Counter Meet"
  date                  DateTime  @db.Date
  location              String    @db.VarChar(500)
  budgetAllocated       Decimal?  @map("budget_allocated") @db.Decimal(12, 2) // Budget for the event/month
  participantsCount     Int?      @map("participants_count") // Total number of attendees
  // If the meeting was recorded on a TVR, link back
  technicalVisitReports TechnicalVisitReport[] @relation("TVRMeeting")
  
  // The user who created/organized the meeting
  createdByUserId       Int       @map("created_by_user_id")
  createdBy             User      @relation("UserCreatedMeetings", fields: [createdByUserId], references: [id])
  
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)
  
  @@index([createdByUserId])
  @@map("tso_meetings")
}

// GiftInventory: Master list of gifts for the TSO/CRM activity
model GiftInventory {
  id                      Int       @id @default(autoincrement())
  itemName                String    @map("item_name") @unique @db.VarChar(255) // e.g., "T-Shirt", "Key Chain"
  unitPrice               Decimal   @map("unit_price") @db.Decimal(10, 2)
  totalAvailableQuantity  Int       @map("total_available_quantity")
  // Relations
  logs                    GiftAllocationLog[]

  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("gift_inventory")
}

// GiftAllocationLog: Tracks allocation to TSO and distribution
model GiftAllocationLog {
  id                      String    @id @default(uuid()) @db.VarChar(255)
  giftId                  Int       @map("gift_id") // FK to GiftInventory
  userId                  Int       @map("user_id") // The TSO/User receiving or distributing the gift
  transactionType         String    @map("transaction_type") @db.VarChar(50) // "Allocation", "Transfer", "Distribution", "Deduction"
  quantity                Int
  
  // Audit fields
  sourceUserId            Int?      @map("source_user_id") // For transfers (from whom)
  destinationUserId       Int?      @map("destination_user_id") // For transfers (to whom)
  relatedReportId         String?   @map("related_report_id") @db.VarChar(255) // DVR or TVR where distributed
  
  // Relations
  giftItem                GiftInventory @relation(fields: [giftId], references: [id])
  user                    User          @relation("UserGiftLogs", fields: [userId], references: [id])
  sourceUser              User?         @relation("SourceUserTransfers", fields: [sourceUserId], references: [id], onDelete: SetNull)
  destinationUser         User?         @relation("DestinationUserTransfers", fields: [destinationUserId], references: [id], onDelete: SetNull)

  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  
  @@index([giftId])
  @@index([userId])
  @@index([sourceUserId])
  @@index([destinationUserId])
  @@map("gift_allocation_logs")
}

// Permanent Journey Plans
model PermanentJourneyPlan {
  id              String   @id @default(uuid()) @db.VarChar(255)

  // Assigned-to user
  userId          Int      @map("user_id")
  user            User     @relation("PJP_AssignedUser", fields: [userId], references: [id])

  // Creator user
  createdById     Int      @map("created_by_id")
  createdBy       User     @relation("PJP_CreatedBy", fields: [createdById], references: [id])

  planDate        DateTime @map("plan_date") @db.Date
  areaToBeVisited String   @map("area_to_be_visited") @db.VarChar(500)
  description     String?  @db.VarChar(500)
  status          String   @db.VarChar(50)

  // Ensure the name here matches DailyTask (see below)
  dailyTasks      DailyTask[] @relation("PJPTasks")

  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([userId], map: "idx_permanent_journey_plans_user_id")
  @@index([createdById], map: "idx_permanent_journey_plans_created_by_id")
  @@map("permanent_journey_plans")
}

// Salesman Attendance
model SalesmanAttendance {
  id                   String    @id @default(uuid()) @db.VarChar(255)
  userId               Int       @map("user_id") // Foreign Key to User.id
  attendanceDate       DateTime  @map("attendance_date") @db.Date
  locationName         String    @map("location_name") @db.VarChar(500)
  inTimeTimestamp      DateTime  @map("in_time_timestamp") @db.Timestamptz(6)
  outTimeTimestamp     DateTime? @map("out_time_timestamp") @db.Timestamptz(6)
  inTimeImageCaptured  Boolean   @map("in_time_image_captured")
  outTimeImageCaptured Boolean   @map("out_time_image_captured")
  inTimeImageUrl       String?   @map("in_time_image_url") @db.VarChar(500)
  outTimeImageUrl      String?   @map("out_time_image_url") @db.VarChar(500)
  inTimeLatitude       Decimal   @map("in_time_latitude") @db.Decimal(10, 7)
  inTimeLongitude      Decimal   @map("in_time_longitude") @db.Decimal(10, 7)
  inTimeAccuracy       Decimal?  @map("in_time_accuracy") @db.Decimal(10, 2)
  inTimeSpeed          Decimal?  @map("in_time_speed") @db.Decimal(10, 2)
  inTimeHeading        Decimal?  @map("in_time_heading") @db.Decimal(10, 2)
  inTimeAltitude       Decimal?  @map("in_time_altitude") @db.Decimal(10, 2)
  outTimeLatitude      Decimal?  @map("out_time_latitude") @db.Decimal(10, 7)
  outTimeLongitude     Decimal?  @map("out_time_longitude") @db.Decimal(10, 7)
  outTimeAccuracy      Decimal?  @map("out_time_accuracy") @db.Decimal(10, 2)
  outTimeSpeed         Decimal?  @map("out_time_speed") @db.Decimal(10, 2)
  outTimeHeading       Decimal?  @map("out_time_heading") @db.Decimal(10, 2)
  outTimeAltitude      Decimal?  @map("out_time_altitude") @db.Decimal(10, 2)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_salesman_attendance_user_id")
  @@map("salesman_attendance")
}

// Salesman Leave Applications
model SalesmanLeaveApplication {
  id           String   @id @default(uuid()) @db.VarChar(255)
  userId       Int      @map("user_id") // Foreign Key to User.id
  leaveType    String   @map("leave_type") @db.VarChar(100)
  startDate    DateTime @map("start_date") @db.Date
  endDate      DateTime @map("end_date") @db.Date
  reason       String   @db.VarChar(500)
  status       String   @db.VarChar(50) // "Pending", "Approved", "Rejected"
  adminRemarks String?  @map("admin_remarks") @db.VarChar(500)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_salesman_leave_applications_user_id")
  @@map("salesman_leave_applications")
}

// Competition Report
model CompetitionReport {
  id                    String    @id @default(cuid()) // Unique ID for each report
  userId                Int       @map("user_id") // Foreign Key to User.id (salesman who created report)
  reportDate            DateTime  @map("report_date") @db.Date
  brandName             String    @map("brand_name") @db.VarChar(255)
  billing               String    @db.VarChar(100)
  nod                   String    @db.VarChar(100)
  retail                String    @db.VarChar(100)
  schemesYesNo          String    @map("schemes_yes_no") @db.VarChar(10) // "Yes" or "No"
  avgSchemeCost         Decimal   @map("avg_scheme_cost") @db.Decimal(10, 2)
  remarks               String?   @db.VarChar(500) // Made optional

  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("competition_reports") // Table name in DB
  @@index([userId]) // Index for faster lookups by user
}

// Geo Tracking
model GeoTracking {
  id                      String    @id @default(uuid()) // Unique ID for each geo-tracking record
  userId                  Int       @map("user_id") // Foreign Key to User.id
  latitude                Decimal   @db.Decimal(10, 7)
  longitude               Decimal   @db.Decimal(10, 7)
  recordedAt              DateTime  @default(now()) @map("recorded_at") @db.Timestamptz(6) // Timestamp of the recording
  accuracy                Decimal?  @db.Decimal(10, 2) // Optional: GPS accuracy in meters
  speed                   Decimal?  @db.Decimal(10, 2) // Optional: Speed in m/s
  heading                 Decimal?  @db.Decimal(10, 2) // Optional: Direction of travel in degrees
  altitude                Decimal?  @db.Decimal(10, 2) // Optional: Altitude in meters
  locationType            String?   @map("location_type") @db.VarChar(50) // Optional: e.g., 'GPS', 'Network', 'Fused'
  activityType            String?   @map("activity_type") @db.VarChar(50) // Optional: e.g., 'still', 'in_vehicle', 'walking'
  appState                String?   @map("app_state") @db.VarChar(50) // Optional: 'foreground', 'background'
  batteryLevel            Decimal?  @map("battery_level") @db.Decimal(5, 2) // Optional: Battery percentage (0-100)
  isCharging              Boolean?  @map("is_charging") // Optional: Is device charging?
  networkStatus           String?   @map("network_status") @db.VarChar(50) // Optional: 'wifi', 'mobile', 'none'
  ipAddress               String?   @map("ip_address") @db.VarChar(45) // Optional: IPv4 or IPv6
  siteName                String?   @map("site_name") @db.VarChar(255) // Optional: Name of a specific site if visited
  checkInTime             DateTime? @map("check_in_time") @db.Timestamptz(6) // Optional: Timestamp of check-in
  checkOutTime            DateTime? @map("check_out_time") @db.Timestamptz(6) // Optional: Timestamp of check-out
  totalDistanceTravelled  Decimal?  @map("total_distance_travelled") @db.Decimal(10, 3) // NEW FIELD! Total distance in KM or M
  journeyId               String?   @map("journey_id")
  isActive                Boolean   @default(true) @map("is_active")
  destLat                 Decimal?  @map("dest_lat") @db.Decimal(10, 7)
  destLng                 Decimal?  @map("dest_lng") @db.Decimal(10, 7)

  // Relationship to the User (junior-exec, exec, etc...)
  user User @relation("UserGeoTracking", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

   // INDEXES THAT MATTER
  @@index([userId, recordedAt], map: "idx_geo_user_time")
  @@index([journeyId, recordedAt], map: "idx_geo_journey_time")
  @@index([isActive], map: "idx_geo_active")
  //-----------------
  @@index([userId], map: "idx_geo_tracking_user_id")
  @@index([recordedAt], map: "idx_geo_tracking_recorded_at") // Useful for time-based queries
  @@map("geo_tracking") // Table name in DB
}

// DailyTask model for admin to salesman task assignment + self assignment of tasks by salesmen
model DailyTask {
  id                String    @id @default(uuid()) @db.VarChar(255)
  userId            Int       @map("user_id") // Salesman to whom the task is assigned
  assignedByUserId  Int       @map("assigned_by_user_id") // Admin/Manager who assigned the task
  taskDate          DateTime  @map("task_date") @db.Date
  visitType         String    @map("visit_type") @db.VarChar(50) // "Client Visit", "Technical Visit"
  relatedDealerId   String?   @map("related_dealer_id") @db.VarChar(255) // Optional: For Client Visits (FK to Dealer.id)
  siteName          String?   @map("site_name") @db.VarChar(255) // Optional: For Technical Visits
  description       String?   @db.VarChar(500)
  status            String    @default("Assigned") @db.VarChar(50) // "Assigned", "Accepted", "Completed", "Rejected", "In Progress"
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  pjpId             String?   @map("pjp_id") @db.VarChar(255) // Foreign Key to PermanentJourneyPlan

  user              User      @relation("AssignedTasks", fields: [userId], references: [id], onDelete: Cascade)
  assignedBy        User      @relation("CreatedTasks", fields: [assignedByUserId], references: [id], onDelete: NoAction) // NoAction to keep admin record if deleted
  relatedDealer     Dealer?   @relation("DealerDailyTasks", fields: [relatedDealerId], references: [id], onDelete: SetNull) // Named relation
  permanentJourneyPlan PermanentJourneyPlan? @relation("PJPTasks", fields: [pjpId], references: [id], onDelete: SetNull) // Named relation

  @@index([userId], map: "idx_daily_tasks_user_id")
  @@index([assignedByUserId], map: "idx_daily_tasks_assigned_by_user_id")
  @@index([taskDate], map: "idx_daily_tasks_task_date")
  @@index([pjpId], map: "idx_daily_tasks_pjp_id")
  @@index([relatedDealerId], map: "idx_daily_tasks_related_dealer_id")
  @@index([taskDate, userId], map: "idx_daily_tasks_date_user")
  @@index([status], map: "idx_daily_tasks_status")
  @@map("daily_tasks")
}

//SalesOrder model for when salesman places sales orders
model SalesOrder {
  id              String   @id @default(uuid()) @db.VarChar(255)
  // user table and dealer table references
  salesmanId      Int?      @map("salesman_id")
  salesman       User?     @relation(fields: [salesmanId], references: [id], onDelete: SetNull)
  dealerId        String?   @map("dealer_id") @db.VarChar(255)
  dealer          Dealer?   @relation(fields: [dealerId], references: [id], onDelete: SetNull)

  // Order details
  quantity        Decimal  @db.Decimal(10, 2)
  unit            String   @db.VarChar(50)
  orderTotal      Decimal  @db.Decimal(12, 2)
  advancePayment  Decimal  @db.Decimal(12, 2)
  pendingPayment  Decimal  @db.Decimal(12, 2)
  estimatedDelivery DateTime @db.Date
  remarks         String?  @db.VarChar(500)
  paymentMethod   String? @map("payment_method") @db.VarChar(50)

  // Link back to the DVR where the order was taken
  dvrId           String?  @map("dvr_id") @db.VarChar(255)
  dailyVisitReport DailyVisitReport? @relation("OrderDVR", fields: [dvrId], references: [id], onDelete: SetNull)

  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([salesmanId], map: "idx_sales_orders_salesman_id")
  @@index([dealerId], map: "idx_sales_orders_dealer_id")
  @@map("sales_orders")
}

// Dealer Reports and Scores
model DealerReportsAndScores {
  id                      String    @id @default(cuid()) @db.VarChar(255)
  dealerId                String    @unique @map("dealer_id") // Foreign Key to the Dealer.id, ensures one score entry per dealer
  dealerScore             Decimal   @map("dealer_score") @db.Decimal(10, 2)
  trustWorthinessScore    Decimal   @map("trust_worthiness_score") @db.Decimal(10, 2) // Based on timely payments
  creditWorthinessScore   Decimal   @map("credit_worthiness_score") @db.Decimal(10, 2) // Based on payment history and collection data
  orderHistoryScore       Decimal   @map("order_history_score") @db.Decimal(10, 2) // Based on volume and consistency of orders
  visitFrequencyScore     Decimal   @map("visit_frequency_score") @db.Decimal(10, 2) // Based on technical and daily visits
  lastUpdatedDate         DateTime  @map("last_updated_date") @db.Timestamptz(6) // Timestamp of the last score calculation
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relation back to the Dealer model
  dealer Dealer @relation("DealerScores", fields: [dealerId], references: [id])

  @@map("dealer_reports_and_scores")
}

// Rating: Stores ratings for salespeople.
model Rating {
  id                      Int        @id @default(autoincrement())
  userId                  Int        @map("user_id") // Foreign key to User model
  area                    String     @map("area")
  region                  String     @map("region")
  rating                  Int        @map("rating")

  // Relations to other tables
  user            User      @relation(fields: [userId], references: [id])

  @@map("ratings")
}

// Brand and DealerBrandMapping tables are taken and used together 
// model to store the brand names to normalize the schema
model Brand {
  id         Int    @id @default(autoincrement())
  name       String @unique @map("brand_name") @db.VarChar(255)
  // Relation to DealerBrandMapping
  dealers    DealerBrandMapping[]
  
  @@map("brands")
}

// model for the mapping of dealers to brand capacities
model DealerBrandMapping {
  id          String   @id @default(cuid()) @db.VarChar(255)
  dealerId    String   @map("dealer_id")
  brandId     Int      @map("brand_id")
  capacityMT  Decimal  @map("capacity_mt") @db.Decimal(12, 2)

  // Relations
  dealer      Dealer @relation(fields: [dealerId], references: [id])
  brand       Brand  @relation(fields: [brandId], references: [id])

  @@unique([dealerId, brandId])
  @@map("dealer_brand_mapping")
}