// schema.prisma

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id                   Int       @id @default(autoincrement())
  companyName          String    @map("company_name") @db.VarChar(255)
  officeAddress        String    @map("office_address")
  isHeadOffice         Boolean   @default(true) @map("is_head_office")
  phoneNumber          String    @map("phone_number") @db.VarChar(50)
  region               String?   @map("region")
  area                 String?   @map("area")
  adminUserId          String    @unique @map("admin_user_id")
  createdAt            DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  workosOrganizationId String?   @unique @map("workos_organization_id")
  users                User[]

  @@index([adminUserId], map: "idx_admin_user_id")
  @@map("companies")
}

model User {
  id                        Int       @id @default(autoincrement())
  workosUserId              String?    @unique @map("workos_user_id")
  companyId                 Int       @map("company_id")
  email                     String    @map("email")
  firstName                 String?   @map("first_name")
  lastName                  String?   @map("last_name")
  role                      String    @map("role") // Jr Exec, Exec, Sr Exec, Asst Manager, Manager, Sr Manager, etc....
  createdAt                 DateTime? @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt                 DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)
  phoneNumber               String?   @map("phone_number") @db.VarChar(50)
  company                   Company   @relation(fields: [companyId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  inviteToken               String?   @unique
  status                    String    @default("active") // "pending", "active", "inactive"
  region                    String?   @map("region")
  area                      String?   @map("area")


  // Fields for salesman app specific login (empID and emp_password)
  salesmanLoginId           String?   @unique @map("salesman_login_id")
  hashedPassword            String?   @map("hashed_password") // Stores securely hashed passwords

  // --- HIERARCHY FIELDS ---
  reportsToId               Int?      @map("reports_to_id")
  reportsTo                 User?     @relation("ReportsToManager", fields: [reportsToId], references: [id], onDelete: SetNull)
  reports                   User[]    @relation("ReportsToManager")

  // Relationships to new tables
  dealers                   Dealer[] 
  dailyVisitReports         DailyVisitReport[]
  technicalVisitReports     TechnicalVisitReport[]
  salesmanAttendance        SalesmanAttendance[]
  salesmanLeaveApplications SalesmanLeaveApplication[]
  clientReports             ClientReport[]
  competitionReports        CompetitionReport[]
  geoTrackingRecords        GeoTracking[] @relation("UserGeoTracking") // Relationship for GeoTracking records
  assignedTasks             DailyTask[]  @relation("AssignedTasks") // Tasks assigned to this user (salesman)
  createdTasks              DailyTask[]  @relation("CreatedTasks") // Tasks created by this user (admin)
  salesReports              SalesReport[]
  ddpRecords                DDP[]
  ratings                   Rating[]
  salesOrders               SalesOrder[]
  // PJPs assigned to this user
  permanentJourneyPlansAssigned PermanentJourneyPlan[] @relation("PJP_AssignedUser")
  // PJPs created by this user
  permanentJourneyPlansCreated  PermanentJourneyPlan[] @relation("PJP_CreatedBy")
  
  @@unique([companyId, email])
  @@index([companyId], map: "idx_user_company_id")
  @@index([workosUserId], map: "idx_workos_user_id")
  @@map("users")
}

// Daily Visit Reports
model DailyVisitReport {
  id                    String    @id @default(uuid()) @db.VarChar(255)
  userId                Int       @map("user_id") // Foreign Key to User.id
  reportDate            DateTime  @map("report_date") @db.Date
  dealerType            String    @map("dealer_type") @db.VarChar(50) // "Dealer", "Sub Dealer"
  dealerName            String?   @map("dealer_name") @db.VarChar(255)
  subDealerName         String?   @map("sub_dealer_name") @db.VarChar(255)
  location              String    @db.VarChar(500)
  latitude              Decimal   @db.Decimal(10, 7)
  longitude             Decimal   @db.Decimal(10, 7)
  visitType             String    @map("visit_type") @db.VarChar(50) // "Best", "Non Best"
  dealerTotalPotential  Decimal   @map("dealer_total_potential") @db.Decimal(10, 2)
  dealerBestPotential   Decimal   @map("dealer_best_potential") @db.Decimal(10, 2)
  brandSelling          String[]  @map("brand_selling") // Array of strings
  contactPerson         String?   @map("contact_person") @db.VarChar(255)
  contactPersonPhoneNo  String?   @map("contact_person_phone_no") @db.VarChar(20)
  todayOrderMt          Decimal   @map("today_order_mt") @db.Decimal(10, 2)
  todayCollectionRupees Decimal   @map("today_collection_rupees") @db.Decimal(10, 2)
  overdueAmount         Decimal?  @map("overdue_amount") @db.Decimal(12, 2)
  feedbacks             String    @db.VarChar(500)
  solutionBySalesperson String?   @map("solution_by_salesperson") @db.VarChar(500)
  anyRemarks            String?   @map("any_remarks") @db.VarChar(500)
  checkInTime           DateTime  @map("check_in_time") @db.Timestamptz(6)
  checkOutTime          DateTime? @map("check_out_time") @db.Timestamptz(6)
  inTimeImageUrl        String?   @map("in_time_image_url") @db.VarChar(500)
  outTimeImageUrl       String?   @map("out_time_image_url") @db.VarChar(500)
  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user                  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // New relation to the CollectionReport. A Daily Visit Report can be associated with one CollectionReport
  // This sets up a one-to-one or one-to-many link, allowing a collection to be recorded for a specific visit.
  collectionReport      CollectionReport?

  @@index([userId], map: "idx_daily_visit_reports_user_id")
  @@map("daily_visit_reports")
}

// Technical Visit Reports
model TechnicalVisitReport {
  id                      String    @id @default(uuid()) @db.VarChar(255)
  userId                  Int       @map("user_id") // Foreign Key to User.id
  reportDate              DateTime  @map("report_date") @db.Date
  visitType               String    @map("visit_type") @db.VarChar(50) // "Installation", "Repair", "Maintenance"
  siteNameConcernedPerson String    @map("site_name_concerned_person") @db.VarChar(255)
  phoneNo                 String    @map("phone_no") @db.VarChar(20)
  emailId                 String?   @map("email_id") @db.VarChar(255)
  clientsRemarks          String    @map("clients_remarks") @db.VarChar(500)
  salespersonRemarks      String    @map("salesperson_remarks") @db.VarChar(500)
  checkInTime             DateTime  @map("check_in_time") @db.Timestamptz(6)
  checkOutTime            DateTime? @map("check_out_time") @db.Timestamptz(6)
  inTimeImageUrl          String?   @map("in_time_image_url") @db.VarChar(500)
  outTimeImageUrl         String?   @map("out_time_image_url") @db.VarChar(500)
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  //Added fields from the pdf
  siteVisitBrandInUse     String[] @map("site_visit_brand_in_use") // e.g., "Star/Dalmia/Ultratech" [cite: 99]
  siteVisitStage          String? @map("site_visit_stage")      // e.g., "Foundation/column/slab casting" [cite: 100]
  conversionFromBrand     String?  @map("conversion_from_brand")      // e.g., "Dalmia/Star" [cite: 102]
  conversionQuantityValue Decimal? @map("conversion_quantity_value") @db.Decimal(10, 2)
  conversionQuantityUnit  String?  @map("conversion_quantity_unit")  @db.VarChar(20) // "Bag" or "MT" [cite: 103]
  associatedPartyName     String?  @map("associated_party_name")     // Dealer, Sub dealer name [cite: 104]
  influencerType          String[] @map("influencer_type") // e.g., "Contractor", "Engineer" etc. [cite: 106, 107, 108, 109, 110, 111]
  serviceType             String? @map("service_type") // e.g., "Dhalai Attend" [cite: 113]
  qualityComplaint        String? @map("quality_complaint") // e.g., "Slow Setting", "Cracks" etc. [cite: 116, 117, 118, 119]
  promotionalActivity     String? @map("promotional_activity") // e.g., "Mason Meet" [cite: 122]
  channelPartnerVisit     String? @map("channel_partner_visit") // e.g., "Dealer Visit" [cite: 129]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_technical_visit_reports_user_id")
  @@map("technical_visit_reports")
}

// Permanent Journey Plans
model PermanentJourneyPlan {
  id              String   @id @default(uuid()) @db.VarChar(255)

  // Assigned-to user
  userId          Int      @map("user_id")
  user            User     @relation("PJP_AssignedUser", fields: [userId], references: [id])

  // Creator user
  createdById     Int      @map("created_by_id")
  createdBy       User     @relation("PJP_CreatedBy", fields: [createdById], references: [id])

  planDate        DateTime @map("plan_date") @db.Date
  areaToBeVisited String   @map("area_to_be_visited") @db.VarChar(500)
  description     String?  @db.VarChar(500)
  status          String   @db.VarChar(50)

  // Ensure the name here matches DailyTask (see below)
  dailyTasks      DailyTask[] @relation("PJPTasks")

  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([userId], map: "idx_permanent_journey_plans_user_id")
  @@index([createdById], map: "idx_permanent_journey_plans_created_by_id")
  @@map("permanent_journey_plans")
}

// Dealers (Consolidated for Dealers and Sub-Dealers)
model Dealer {
  id             String   @id @default(uuid()) @db.VarChar(255)
  userId         Int?      @map("user_id") // Primary user (salesman) associated
  type           String   @db.VarChar(50)
  parentDealerId String?  @map("parent_dealer_id") @db.VarChar(255) // Self-referencing FK for sub-dealers
  name           String   @db.VarChar(255) // Stores dealerName or subDealerName
  region         String   @db.VarChar(100)
  area           String   @db.VarChar(255)
  phoneNo        String   @map("phone_no") @db.VarChar(20)
  address        String   @db.VarChar(500)
  pinCode        String?   @db.VarChar(20)
  dateOfBirth    DateTime? @db.Date
  anniversaryDate DateTime? @db.Date
  totalPotential Decimal  @map("total_potential") @db.Decimal(10, 2)
  bestPotential  Decimal  @map("best_potential") @db.Decimal(10, 2)
  brandSelling   String[] @map("brand_selling") // Array of strings
  feedbacks      String   @db.VarChar(500)
  remarks        String?  @db.VarChar(500)
  createdAt      DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt      DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parentDealer    Dealer?  @relation("SubDealers", fields: [parentDealerId], references: [id], onDelete: SetNull)
  subDealers      Dealer[] @relation("SubDealers")
  dailyTasks      DailyTask[] @relation("DealerDailyTasks") // NEW: Tasks related to this dealer (Named relation)
  salesOrders     SalesOrder[]

  reportsAndScores DealerReportsAndScores? @relation("DealerScores")

  //New fields linked back to tables under 3 Excel files: Sales & Colln August'25 + 
  //                                                      Daily Sale & Collection + MIS Pointers
  salesReports            SalesReport[]
  collectionReports CollectionReport[]
  dealerBrandCapacities  DealerBrandMapping[]
  ddpRecords                DDP[]

  @@index([userId], map: "idx_dealers_user_id")
  @@index([parentDealerId], map: "idx_dealers_parent_dealer_id")
  @@map("dealers")
}

// Salesman Attendance
model SalesmanAttendance {
  id                   String    @id @default(uuid()) @db.VarChar(255)
  userId               Int       @map("user_id") // Foreign Key to User.id
  attendanceDate       DateTime  @map("attendance_date") @db.Date
  locationName         String    @map("location_name") @db.VarChar(500)
  inTimeTimestamp      DateTime  @map("in_time_timestamp") @db.Timestamptz(6)
  outTimeTimestamp     DateTime? @map("out_time_timestamp") @db.Timestamptz(6)
  inTimeImageCaptured  Boolean   @map("in_time_image_captured")
  outTimeImageCaptured Boolean   @map("out_time_image_captured")
  inTimeImageUrl       String?   @map("in_time_image_url") @db.VarChar(500)
  outTimeImageUrl      String?   @map("out_time_image_url") @db.VarChar(500)
  inTimeLatitude       Decimal   @map("in_time_latitude") @db.Decimal(10, 7)
  inTimeLongitude      Decimal   @map("in_time_longitude") @db.Decimal(10, 7)
  inTimeAccuracy       Decimal?  @map("in_time_accuracy") @db.Decimal(10, 2)
  inTimeSpeed          Decimal?  @map("in_time_speed") @db.Decimal(10, 2)
  inTimeHeading        Decimal?  @map("in_time_heading") @db.Decimal(10, 2)
  inTimeAltitude       Decimal?  @map("in_time_altitude") @db.Decimal(10, 2)
  outTimeLatitude      Decimal?  @map("out_time_latitude") @db.Decimal(10, 7)
  outTimeLongitude     Decimal?  @map("out_time_longitude") @db.Decimal(10, 7)
  outTimeAccuracy      Decimal?  @map("out_time_accuracy") @db.Decimal(10, 2)
  outTimeSpeed         Decimal?  @map("out_time_speed") @db.Decimal(10, 2)
  outTimeHeading       Decimal?  @map("out_time_heading") @db.Decimal(10, 2)
  outTimeAltitude      Decimal?  @map("out_time_altitude") @db.Decimal(10, 2)
  createdAt            DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt            DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_salesman_attendance_user_id")
  @@map("salesman_attendance")
}

// Salesman Leave Applications
model SalesmanLeaveApplication {
  id           String   @id @default(uuid()) @db.VarChar(255)
  userId       Int      @map("user_id") // Foreign Key to User.id
  leaveType    String   @map("leave_type") @db.VarChar(100)
  startDate    DateTime @map("start_date") @db.Date
  endDate      DateTime @map("end_date") @db.Date
  reason       String   @db.VarChar(500)
  status       String   @db.VarChar(50) // "Pending", "Approved", "Rejected"
  adminRemarks String?  @map("admin_remarks") @db.VarChar(500)
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt    DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "idx_salesman_leave_applications_user_id")
  @@map("salesman_leave_applications")
}

// Client Report
model ClientReport {
  id                        String   @id @default(cuid()) // Unique ID for each report
  dealerType                String
  dealerSubDealerName       String   @map("dealer_sub_dealer_name")
  location                  String
  typeBestNonBest           String   @map("type_best_non_best")
  dealerTotalPotential      Decimal  @db.Decimal(10, 2)
  dealerBestPotential       Decimal  @db.Decimal(10, 2)
  brandSelling              String[]
  contactPerson             String
  contactPersonPhoneNo      String   @map("contact_person_phone_no")
  todayOrderMT              Decimal  @map("today_order_mt") @db.Decimal(10, 2)
  todayCollection           Decimal  @map("today_collection_rupees") @db.Decimal(10, 2)
  feedbacks                 String
  solutionsAsPerSalesperson String   @map("solutions_as_per_salesperson")
  anyRemarks                String
  checkOutTime              DateTime @map("check_out_time")

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("client_reports")
}

// Competition Report
model CompetitionReport {
  id                    String    @id @default(cuid()) // Unique ID for each report
  userId                Int       @map("user_id") // Foreign Key to User.id (salesman who created report)
  reportDate            DateTime  @map("report_date") @db.Date
  brandName             String    @map("brand_name") @db.VarChar(255)
  billing               String    @db.VarChar(100)
  nod                   String    @db.VarChar(100)
  retail                String    @db.VarChar(100)
  schemesYesNo          String    @map("schemes_yes_no") @db.VarChar(10) // "Yes" or "No"
  avgSchemeCost         Decimal   @map("avg_scheme_cost") @db.Decimal(10, 2)
  remarks               String?   @db.VarChar(500) // Made optional

  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt             DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime  @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@map("competition_reports") // Table name in DB
  @@index([userId]) // Index for faster lookups by user
}

// Geo Tracking
model GeoTracking {
  id                      String    @id @default(uuid()) // Unique ID for each geo-tracking record
  userId                  Int       @map("user_id") // Foreign Key to User.id
  latitude                Decimal   @db.Decimal(10, 7)
  longitude               Decimal   @db.Decimal(10, 7)
  recordedAt              DateTime  @default(now()) @map("recorded_at") @db.Timestamptz(6) // Timestamp of the recording
  accuracy                Decimal?  @db.Decimal(10, 2) // Optional: GPS accuracy in meters
  speed                   Decimal?  @db.Decimal(10, 2) // Optional: Speed in m/s
  heading                 Decimal?  @db.Decimal(10, 2) // Optional: Direction of travel in degrees
  altitude                Decimal?  @db.Decimal(10, 2) // Optional: Altitude in meters
  locationType            String?   @map("location_type") @db.VarChar(50) // Optional: e.g., 'GPS', 'Network', 'Fused'
  activityType            String?   @map("activity_type") @db.VarChar(50) // Optional: e.g., 'still', 'in_vehicle', 'walking'
  appState                String?   @map("app_state") @db.VarChar(50) // Optional: 'foreground', 'background'
  batteryLevel            Decimal?  @map("battery_level") @db.Decimal(5, 2) // Optional: Battery percentage (0-100)
  isCharging              Boolean?  @map("is_charging") // Optional: Is device charging?
  networkStatus           String?   @map("network_status") @db.VarChar(50) // Optional: 'wifi', 'mobile', 'none'
  ipAddress               String?   @map("ip_address") @db.VarChar(45) // Optional: IPv4 or IPv6
  siteName                String?   @map("site_name") @db.VarChar(255) // Optional: Name of a specific site if visited
  checkInTime             DateTime? @map("check_in_time") @db.Timestamptz(6) // Optional: Timestamp of check-in
  checkOutTime            DateTime? @map("check_out_time") @db.Timestamptz(6) // Optional: Timestamp of check-out
  totalDistanceTravelled  Decimal?  @map("total_distance_travelled") @db.Decimal(10, 3) // NEW FIELD! Total distance in KM or M
  journeyId               String?   @map("journey_id")
  isActive                Boolean   @default(true) @map("is_active")
  destLat                 Decimal?  @map("dest_lat") @db.Decimal(10, 7)
  destLng                 Decimal?  @map("dest_lng") @db.Decimal(10, 7)

  // Relationship to the User (junior-exec, exec, etc...)
  user User @relation("UserGeoTracking", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt DateTime @updatedAt @map("updated_at") @db.Timestamptz(6)

   // INDEXES THAT MATTER
  @@index([userId, recordedAt], map: "idx_geo_user_time")
  @@index([journeyId, recordedAt], map: "idx_geo_journey_time")
  @@index([isActive], map: "idx_geo_active")
  //-----------------
  @@index([userId], map: "idx_geo_tracking_user_id")
  @@index([recordedAt], map: "idx_geo_tracking_recorded_at") // Useful for time-based queries
  @@map("geo_tracking") // Table name in DB
}

// DailyTask model for admin to salesman task assignment + self assignment of tasks by salesmen
model DailyTask {
  id                String    @id @default(uuid()) @db.VarChar(255)
  userId            Int       @map("user_id") // Salesman to whom the task is assigned
  assignedByUserId  Int       @map("assigned_by_user_id") // Admin/Manager who assigned the task
  taskDate          DateTime  @map("task_date") @db.Date
  visitType         String    @map("visit_type") @db.VarChar(50) // "Client Visit", "Technical Visit"
  relatedDealerId   String?   @map("related_dealer_id") @db.VarChar(255) // Optional: For Client Visits (FK to Dealer.id)
  siteName          String?   @map("site_name") @db.VarChar(255) // Optional: For Technical Visits
  description       String?   @db.VarChar(500)
  status            String    @default("Assigned") @db.VarChar(50) // "Assigned", "Accepted", "Completed", "Rejected", "In Progress"
  createdAt         DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt         DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  pjpId             String?   @map("pjp_id") @db.VarChar(255) // Foreign Key to PermanentJourneyPlan

  user              User      @relation("AssignedTasks", fields: [userId], references: [id], onDelete: Cascade)
  assignedBy        User      @relation("CreatedTasks", fields: [assignedByUserId], references: [id], onDelete: NoAction) // NoAction to keep admin record if deleted
  relatedDealer     Dealer?   @relation("DealerDailyTasks", fields: [relatedDealerId], references: [id], onDelete: SetNull) // Named relation
  permanentJourneyPlan PermanentJourneyPlan? @relation("PJPTasks", fields: [pjpId], references: [id], onDelete: SetNull) // Named relation

  @@index([userId], map: "idx_daily_tasks_user_id")
  @@index([assignedByUserId], map: "idx_daily_tasks_assigned_by_user_id")
  @@index([taskDate], map: "idx_daily_tasks_task_date")
  @@index([pjpId], map: "idx_daily_tasks_pjp_id")
  @@index([relatedDealerId], map: "idx_daily_tasks_related_dealer_id")
  @@index([taskDate, userId], map: "idx_daily_tasks_date_user")
  @@index([status], map: "idx_daily_tasks_status")
  @@map("daily_tasks")
}

//SalesOrder model for when salesman places sales orders
model SalesOrder {
  id              String   @id @default(uuid()) @db.VarChar(255)
  // user table and dealer table references
  salesmanId      Int?      @map("salesman_id")
  salesman       User?     @relation(fields: [salesmanId], references: [id], onDelete: SetNull)
  dealerId        String?   @map("dealer_id") @db.VarChar(255)
  dealer          Dealer?   @relation(fields: [dealerId], references: [id], onDelete: SetNull)

  // Order details
  quantity        Decimal  @db.Decimal(10, 2)
  unit            String   @db.VarChar(50)
  orderTotal      Decimal  @db.Decimal(12, 2)
  advancePayment  Decimal  @db.Decimal(12, 2)
  pendingPayment  Decimal  @db.Decimal(12, 2)
  estimatedDelivery DateTime @db.Date
  remarks         String?  @db.VarChar(500)

  createdAt       DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt       DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  @@index([salesmanId], map: "idx_sales_orders_salesman_id")
  @@index([dealerId], map: "idx_sales_orders_dealer_id")
  @@map("sales_orders")
}

// Dealer Reports and Scores
model DealerReportsAndScores {
  id                      String    @id @default(cuid()) @db.VarChar(255)
  dealerId                String    @unique @map("dealer_id") // Foreign Key to the Dealer.id, ensures one score entry per dealer
  dealerScore             Decimal   @map("dealer_score") @db.Decimal(10, 2)
  trustWorthinessScore    Decimal   @map("trust_worthiness_score") @db.Decimal(10, 2) // Based on timely payments
  creditWorthinessScore   Decimal   @map("credit_worthiness_score") @db.Decimal(10, 2) // Based on payment history and collection data
  orderHistoryScore       Decimal   @map("order_history_score") @db.Decimal(10, 2) // Based on volume and consistency of orders
  visitFrequencyScore     Decimal   @map("visit_frequency_score") @db.Decimal(10, 2) // Based on technical and daily visits
  lastUpdatedDate         DateTime  @map("last_updated_date") @db.Timestamptz(6) // Timestamp of the last score calculation
  createdAt               DateTime  @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt               DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relation back to the Dealer model
  dealer Dealer @relation("DealerScores", fields: [dealerId], references: [id])

  @@map("dealer_reports_and_scores")
}

// Newly added tables from the Excel file: Sales & Collection for August'25 + 
//                                         Daily Sale & Collection + MIS Pointers
// SalesReport: Tracks sales data for each salesperson and dealer.
model SalesReport {
  id                     Int        @id @default(autoincrement())
  date                   DateTime   @db.Date
  monthlyTarget          Decimal    @map("monthly_target") @db.Decimal(12, 2)
  tillDateAchievement    Decimal    @map("till_date_achievement") @db.Decimal(12, 2)
  yesterdayTarget        Decimal?   @map("yesterday_target") @db.Decimal(12, 2)
  yesterdayAchievement   Decimal?   @map("yesterday_achievement") @db.Decimal(12, 2)

  // Foreign keys to User and Dealer tables
  salesPersonId           Int       @map("sales_person_id")
  dealerId                String    @map("dealer_id")

  // Relations
  salesPerson             User      @relation(fields: [salesPersonId], references: [id])
  dealer                  Dealer    @relation(fields: [dealerId], references: [id])

  @@map("sales_report")
}

// Derived from the 'Collection' sheet.
// Collection Reports (Refactored to be transactional)
model CollectionReport {
  id                String   @id @default(uuid()) @db.VarChar(255)
  // Foreign key to link to a specific Daily Visit Report
  dvrId             String   @unique @map("dvr_id")
  // Foreign key to link to the Dealer who made the payment
  dealerId          String   @map("dealer_id")
  // The amount collected during this visit
  collectedAmount   Decimal  @map("collected_amount") @db.Decimal(12, 2)
  // The date the collection was made, which is the same as the DVR created date
  collectedOnDate   DateTime @map("collected_on_date") @db.Date

  weeklyTarget          Decimal?  @map("weekly_target") @db.Decimal(12, 2)
  tillDateAchievement   Decimal?  @map("till_date_achievement") @db.Decimal(12, 2)
  yesterdayTarget       Decimal?  @map("yesterday_target") @db.Decimal(12, 2)
  yesterdayAchievement  Decimal?  @map("yesterday_achievement") @db.Decimal(12, 2)
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz(6)
  updatedAt             DateTime? @default(now()) @updatedAt @map("updated_at") @db.Timestamptz(6)

  // Relations to the Daily Visit Report and the Dealer
  dvr               DailyVisitReport @relation(fields: [dvrId], references: [id], onDelete: Cascade)
  dealer            Dealer           @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  @@index([dealerId], map: "idx_collection_reports_dealer_id")
  @@map("collection_reports")
}

// DDP: Tracks the Dealer Development Process.
model DDP {
  id                     Int        @id @default(autoincrement())
  userId          Int       @map("user_id") // Foreign key to User model
  dealerId        String    @map("dealer_id") // Foreign key to Dealer model
  creationDate           DateTime   @map("creation_date") @db.Date
  status                 String     @map("status")
  obstacle               String?    @map("obstacle")

  // Relations to other tables
  user            User      @relation(fields: [userId], references: [id])
  dealer          Dealer    @relation(fields: [dealerId], references: [id])

  @@map("dealer_development_process")
}

// Rating: Stores ratings for salespeople.
model Rating {
  id                      Int        @id @default(autoincrement())
  userId                  Int        @map("user_id") // Foreign key to User model
  area                    String     @map("area")
  region                  String     @map("region")
  rating                  Int        @map("rating")

  // Relations to other tables
  user            User      @relation(fields: [userId], references: [id])

  @@map("ratings")
}

// Brand and DealerBrandMapping tables are taken and used together 
// model to store the brand names to normalize the schema
model Brand {
  id         Int    @id @default(autoincrement())
  name       String @unique @map("brand_name") @db.VarChar(255)
  // Relation to DealerBrandMapping
  dealers    DealerBrandMapping[]
  
  @@map("brands")
}

// model for the mapping of dealers to brand capacities
model DealerBrandMapping {
  id          String   @id @default(cuid()) @db.VarChar(255)
  dealerId    String   @map("dealer_id")
  brandId     Int      @map("brand_id")
  capacityMT  Decimal  @map("capacity_mt") @db.Decimal(12, 2)

  // Relations
  dealer      Dealer @relation(fields: [dealerId], references: [id])
  brand       Brand  @relation(fields: [brandId], references: [id])

  @@unique([dealerId, brandId])
  @@map("dealer_brand_mapping")
}

// MASTER TABLE LINKING ALL USERS-DEALERS-REPORTS-SCORES-TRACKING-... etc.
model MasterConnectedTable {
  id                              String   @id @default(uuid()) @db.VarChar(255)

  companyId                       Int?
  userId                          Int?
  dealerId                        String?  @db.VarChar(255)

  dvrId                           String?  @db.VarChar(255)
  tvrId                           String?  @db.VarChar(255)

  permanentJourneyPlanId          String?  @db.VarChar(255)
  permanentJourneyPlanCreatedById Int?     // mirrors PermanentJourneyPlan.created_by_id

  dailyTaskId                     String?  @db.VarChar(255)

  attendanceId                    String?  @db.VarChar(255)
  leaveApplicationId              String?  @db.VarChar(255)

  clientReportId                  String?  @db.VarChar(255)
  competitionReportId             String?  @db.VarChar(255)
  geoTrackingId                   String?  @db.VarChar(255)
  salesOrderId                    String?  @db.VarChar(255)

  dealerReportsAndScoresId        String?  @db.VarChar(255)

  salesReportId                   Int?
  collectionReportId              String?  @db.VarChar(255)

  ddpId                           Int?
  ratingId                        Int?
  brandId                         Int?
  dealerBrandMappingId            String?  @db.VarChar(255)

  createdAt                       DateTime @default(now()) @db.Timestamptz(6)
  updatedAt                       DateTime @default(now()) @updatedAt @db.Timestamptz(6)

  @@index([companyId], map: "idx_mct_company_id")
  @@index([userId], map: "idx_mct_user_id")
  @@index([dealerId], map: "idx_mct_dealer_id")
  @@index([permanentJourneyPlanId], map: "idx_mct_pjp_id")
  @@index([permanentJourneyPlanCreatedById], map: "idx_mct_pjp_created_by_id")
  @@index([dailyTaskId], map: "idx_mct_dailytask_id")
  @@index([dvrId], map: "idx_mct_dvr_id")
  @@index([tvrId], map: "idx_mct_tvr_id")
  @@index([attendanceId], map: "idx_mct_attendance_id")
  @@index([leaveApplicationId], map: "idx_mct_leave_id")
  @@index([clientReportId], map: "idx_mct_client_report_id")
  @@index([competitionReportId], map: "idx_mct_comp_report_id")
  @@index([geoTrackingId], map: "idx_mct_geotracking_id")
  @@index([salesOrderId], map: "idx_mct_sales_order_id")
  @@index([dealerReportsAndScoresId], map: "idx_mct_dealer_scores_id")
  @@index([salesReportId], map: "idx_mct_sales_report_id")
  @@index([collectionReportId], map: "idx_mct_collection_report_id")
  @@index([ddpId], map: "idx_mct_ddp_id")
  @@index([ratingId], map: "idx_mct_rating_id")
  @@index([brandId], map: "idx_mct_brand_id")
  @@index([dealerBrandMappingId], map: "idx_mct_dealer_brand_map_id")

  @@map("master_connected_table")
}
// END OF MASTER TABLE